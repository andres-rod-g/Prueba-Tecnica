{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Prolibu - Andrés Rodríguez\", -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = {\n  id: \"form-container\",\n  action: \"\"\n};\nconst _hoisted_3 = {\n  id: \"first-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_FormTitle = _resolveComponent(\"FormTitle\");\n\n  const _component_FormCurrency = _resolveComponent(\"FormCurrency\");\n\n  const _component_FormChangeRate = _resolveComponent(\"FormChangeRate\");\n\n  const _component_FormProducts = _resolveComponent(\"FormProducts\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", null, [_createVNode(_component_FormTitle), _createVNode(_component_FormCurrency, {\n    currency_prop: $data.currency,\n    onUpdateCurrency: $options.updateCurrency\n  }, null, 8\n  /* PROPS */\n  , [\"currency_prop\", \"onUpdateCurrency\"])]), _createVNode(_component_FormChangeRate, {\n    selected_currency_info: $data.selected_currency_info,\n    \"onUpdate:selected_currency_info\": _cache[0] || (_cache[0] = $event => $data.selected_currency_info = $event),\n    onChangeRate: $options.changeRate\n  }, null, 8\n  /* PROPS */\n  , [\"selected_currency_info\", \"onChangeRate\"])]), _createVNode(_component_FormProducts, {\n    onAddProduct: $options.addProduct,\n    products_fetched: $data.products_fetched,\n    currency_fetched: $data.currency_fetched,\n    products: $data.products,\n    selected_currency_info: $data.selected_currency_info,\n    onRemoveProduct: $options.removeProduct,\n    onChangedSubTotal: $options.changedSubTotal\n  }, null, 8\n  /* PROPS */\n  , [\"onAddProduct\", \"products_fetched\", \"currency_fetched\", \"products\", \"selected_currency_info\", \"onRemoveProduct\", \"onChangedSubTotal\"])])], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;gCACIA,oBAAmC,IAAnC,EAAmC,IAAnC,EAAI,4BAAJ,EAA8B;AAAA;AAA9B;;;AACKC,IAAE,EAAC;AAAiBC,QAAM,EAAC;;;AACvBD,IAAE,EAAC;;;;;;;;;;;6DAFZE,YACAH,oBASM,KATN,cASM,CARFA,oBAMM,KANN,cAMM,CALFA,oBAGM,KAHN,EAGM,IAHN,EAGM,CAFJI,aAAaC,oBAAb,CAEI,EADJD,aAAoFE,uBAApF,EAAoF;AAA/DC,iBAAa,EAAEC,cAAgD;AAAjCC,oBAAc,EAAEC;AAAiB,GAApF;;AAAA,0CACI,CAHN,CAKE,EADFN,aAAsGO,yBAAtG,EAAsG;AAA9EC,0BAAsB,EAAEJ,4BAAsD;2EAAtDA,+BAAsBK,OAAgC;AAAzBC,gBAAU,EAAEJ;AAAa,GAAtG;;AAAA,+CACE,CANN,CAQE,EADFN,aAA8RW,uBAA9R,EAA8R;AAA3QC,gBAAU,EAAEN,mBAA+P;AAA5OO,oBAAgB,EAAET,sBAA0N;AAAjMU,oBAAgB,EAAEV,sBAA+K;AAAtJW,YAAQ,EAAEX,cAA4I;AAA3HI,0BAAsB,EAAEJ,4BAAmG;AAAtEY,mBAAa,EAAEV,sBAAuD;AAAnCW,qBAAe,EAAEX;AAAkB,GAA9R;;AAAA,2IACE,CATN","names":["_createElementVNode","id","action","_hoisted_1","_createVNode","_component_FormTitle","_component_FormCurrency","currency_prop","$data","onUpdateCurrency","$options","_component_FormChangeRate","selected_currency_info","$event","onChangeRate","_component_FormProducts","onAddProduct","products_fetched","currency_fetched","products","onRemoveProduct","onChangedSubTotal"],"sourceRoot":"","sources":["C:\\Users\\01mwk.DESKTOP-33PCD1S\\Documents\\GitHub\\prueba_tecnica_AFRG\\prolibu-client\\src\\App.vue"],"sourcesContent":["<template>\n    <h1>Prolibu - Andrés Rodríguez</h1>\n    <div id=\"form-container\" action=\"\">\n        <div id=\"first-container\">\n            <div>\n              <FormTitle />\n              <FormCurrency v-bind:currency_prop=\"currency\" v-on:updateCurrency=\"updateCurrency\"/>\n            </div>\n            <FormChangeRate v-model:selected_currency_info=\"selected_currency_info\" v-on:changeRate=\"changeRate\"/>\n        </div>\n        <FormProducts v-on:addProduct=\"addProduct\" v-bind:products_fetched=\"products_fetched\" v-bind:currency_fetched=\"currency_fetched\" v-bind:products=\"products\" v-bind:selected_currency_info=\"selected_currency_info\" v-on:removeProduct=\"removeProduct\" v-on:changedSubTotal=\"changedSubTotal\"/>\n    </div>\n</template>\n\n<script>\nimport FormTitle from \"./components/FormTitle.vue\";\nimport FormCurrency from './components/FormCurrency.vue'\nimport FormChangeRate from './components/FormChangeRate.vue'\nimport FormProducts from './components/FormProducts.vue';\n\n//Tool used for fetching.\nimport axios from 'axios'\n\nexport default {\n    name: \"App\",\n    components: {\n        FormTitle,\n        FormCurrency,\n        FormChangeRate,\n        FormProducts,\n    },\n    methods: {\n\n\n      addProduct (product) {\n        //Add Product to the list of products that are registered on the table.\n        this.products.push(product)\n      },\n\n\n      removeProduct(uuid){\n        //Remove product from the list of products of the table.\n        this.products = this.products.filter((product) => product.entry_uuid != uuid)\n      },\n\n\n      updateCurrency(currency) {\n        //When changed the currency, \n        //we will update it to all the components.\n        this.currency = currency\n\n        const filtered = this.currency_fetched.filter((curr) => curr.code == currency)\n        this.selected_currency_info = {...filtered[0]}\n        console.log(this.selected_currency_info)\n      },\n\n\n      changeRate(value) {\n        //When changed the value of the exchange rate, \n        //we will update it to all the components.\n        this.selected_currency_info = {...this.selected_currency_info, value}\n      },\n\n\n\n      changedSubTotal(value){\n        //When changed the SubTotal in any of the products, we will update it everywhere.\n        for (let i = 0; i < this.products.length; i++) {\n          if (this.products[i].entry_uuid == value.uuid) {\n            this.products[i].sub_total = value.sub_total\n            console.log(this.products[i])\n          }\n        }\n      }\n\n\n\n    },\n    data () {\n      return {\n        currency: 'USD',\n        selected_currency_info: {\n          \"code\": \"USD\",\n          \"name\": \"Dolar\",\n          \"value\": 1,\n          \"sub_total\": 0,\n        },\n        currency_fetched: [\n        ],\n        products_fetched: [\n        ],\n        products: [],\n      }\n    },\n    mounted () {\n      // When mounted, We're going to fetch data\n\n      let API_URL = 'http://localhost:3000/api/'\n\n      // Products\n      axios\n        .get(API_URL + 'products')\n        .then(response => {this.products_fetched = response.data; console.log(response)})\n\n      // Currency\n      axios\n        .get(API_URL + 'currency')\n        .then(response => this.currency_fetched = response.data)\n    }\n};\n</script>\n\n<style>\n#app {\n    font-family: Avenir, Helvetica, Arial, sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    text-align: center;\n    color: #2c3e50;\n    margin-top: 60px;\n}\n#form-container {\n    display: flex;\n    flex-direction: column;\n    width: 80vw;\n    justify-content: center;\n    justify-self: center;\n    align-items: center;\n    margin: auto;\n}\n#first-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n    width: 50%;\n    min-width: 350px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}